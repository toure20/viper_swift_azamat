//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import XCTest
@testable import am_kz
class {{ module_info.name }}ModuleAssemblyTests: XCTestCase {

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func testConfigureModuleForViewController() {

        //given
        let assembly = {{ module_info.name }}ModuleAssembly()
        
        //when
        let viewController = assembly.assemble { _ in 
            return nil
        }

        //then
        XCTAssertNotNil(viewController.output, "{{ module_info.name }}ViewController is nil after configuration")
        XCTAssertTrue(viewController.output is {{ module_info.name }}Presenter, "output is not {{ module_info.name }}Presenter")

        let presenter: {{ module_info.name }}Presenter? = viewController.output as? {{ module_info.name }}Presenter
        XCTAssertNotNil(presenter?.view, "view in {{ module_info.name }}Presenter is nil after configuration")
        XCTAssertNotNil(presenter?.router, "router in {{ module_info.name }}Presenter is nil after configuration")
        XCTAssertTrue(presenter!.router is {{ module_info.name }}Router, "router is not {{ module_info.name }}Router")

        let interactor: {{ module_info.name }}Interactor? = presenter?.interactor as? {{ module_info.name }}Interactor
        XCTAssertNotNil(interactor?.output, "output in {{ module_info.name }}Interactor is nil after configuration")
    }

    class {{ module_info.name }}ViewControllerMock: {{ module_info.name }}ViewController {

        var displayCalled = false
        var showErrorCalled = false
        var startLoadingCalled = false
        var stopLoadingCalled = false
        var startEditingCalled = false
        var stopEditingCalled = false
        override func display(viewModel: {{ module_info.name }}ViewModel) {
            displayCalled = true
        }
    
        override func show(errorData: {{ module_info.name }}ErrorViewModel) {
            showErrorCalled = true
        }
    
        override func startLoading() {
            startLoadingCalled = true
        }
    
        override func stopLoading() {
            stopLoadingCalled = true
        }
    
        override func startEditing() {
            startEditingCalled = true
        }
    
        override func stopEditing() {
            stopEditingCalled = true
        }
    }
}
